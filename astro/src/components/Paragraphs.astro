---
export interface Props {
  paragraphs: string[];
  left?: boolean;
  white?: boolean;
}

const { paragraphs, left = true, white = false } = Astro.props;

// Function to detect if a paragraph should be a bullet point
function isBulletPoint(text: string): boolean {
  // Consider it a bullet point if it's relatively short and doesn't end with a period
  // or if it looks like a list item
  const trimmed = text.trim();
  return trimmed.length < 100 && !trimmed.endsWith('.') && !trimmed.endsWith('!') && !trimmed.endsWith('?') && !trimmed.includes('.') && !trimmed.includes(':');
}

// Function to format text with bold and italic
function formatText(text: string): string {
  return text
    .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>') // **bold**
    .replace(/\*(.*?)\*/g, '<em>$1</em>'); // *italic*
}

// Process paragraphs to determine bullet points and spacing
const processedParagraphs = paragraphs.map((paragraph, index) => {
  const isBullet = isBulletPoint(paragraph);
  const prevIsBullet = index > 0 ? isBulletPoint(paragraphs[index - 1]) : false;
  const formattedText = formatText(paragraph);
  
  return {
    text: formattedText,
    isBullet,
    marginClass: isBullet && prevIsBullet ? 'mt-1' : 'mt-4'
  };
});
---

<style>
  .slide-in-left {
    opacity: 0;
    transform: translateX(-100px);
    transition: opacity 0.5s ease-out, transform 0.5s ease-out;
  }
  
  .slide-in-right {
    opacity: 0;
    transform: translateX(100px);
    transition: opacity 0.5s ease-out, transform 0.5s ease-out;
  }
  
  @media (min-width: 768px) {
    .slide-in-left {
      transform: translateX(-250px);
    }
    
    .slide-in-right {
      transform: translateX(250px);
    }
  }
  
  .slide-in-left.animate,
  .slide-in-right.animate {
    opacity: 1;
    transform: translateX(0);
  }
  
  .paragraph {
    text-align: left;
  }
  
  .paragraph:first-child {
    margin-top: 0;
  }
  
  .bullet-point {
    display: flex;
    align-items: flex-start;
    gap: 0.5rem;
  }
  
  .bullet-dot {
    color: #ef4444; /* red-500 to match the underline */
    font-weight: bold;
    margin-top: 0.125rem; /* slight offset to align with text */
    flex-shrink: 0;
  }
</style>

<div class="paragraphs-container">
  {processedParagraphs.map((item, index) => (
    <div 
      class={`paragraph ${left ? "slide-in-left" : "slide-in-right"} text-base sm:text-lg ${item.marginClass} ${white ? "text-white" : "text-black"}`}
      data-animate="true"
    >
      {item.isBullet ? (
        <div class="bullet-point">
          <span class="bullet-dot">â€¢</span>
          <span set:html={item.text}></span>
        </div>
      ) : (
        <p set:html={item.text}></p>
      )}
    </div>
  ))}
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const paragraphs = document.querySelectorAll('.paragraph[data-animate="true"]');
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.classList.add('animate');
          observer.unobserve(entry.target); // Stop observing once animated
        }
      });
    }, {
      threshold: 0.2, // Trigger when 20% of the element is visible
      rootMargin: '0px 0px -50px 0px' // Start animation slightly before fully in view
    });
    
    paragraphs.forEach((paragraph) => {
      observer.observe(paragraph);
    });
  });
</script>
