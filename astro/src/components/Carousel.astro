---
import type { CarouselItem as CarouselItemType } from '../types';
import CarouselItem from './CarouselItem.astro';

export interface Props {
  items: CarouselItemType[];
}

const { items } = Astro.props;
const itemsPerView = Math.max(1, Math.floor(items.length / 2));
---

<div class="carousel-container w-full relative">
  <div class="carousel-wrapper overflow-hidden w-full">
    <div class="carousel-track flex transition-transform duration-300 ease-in-out" style="width: 100%;">
      <!-- Duplicate items for infinite effect -->
      {items.map((item) => {
        if (item.type === 'treatment') {
          return (
            <div class="carousel-item" style={`flex: 0 0 ${100 / itemsPerView}%; width: ${100 / itemsPerView}%;`}>
              <a href={item.href} class="block">
                <CarouselItem title={item.title} imageUrl={item.imageUrl} />
              </a>
            </div>
          );
        }
        if (item.type === 'video') {
          return (
            <div class="carousel-item" style={`flex: 0 0 ${100 / itemsPerView}%; width: ${100 / itemsPerView}%;`}>
              <div class="px-2 w-full h-full">
                <div class="bg-black w-full aspect-video rounded-lg overflow-hidden">
                  <iframe
                    class="w-full h-full"
                    src={item.embedUrl}
                    title="YouTube video player"
                    frameborder="0"
                    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                    allowfullscreen
                    loading="lazy"
                  ></iframe>
                </div>
              </div>
            </div>
          );
        }
        return null;
      })}
      <!-- Duplicate items again for infinite effect -->
      {items.map((item) => {
        if (item.type === 'treatment') {
          return (
            <div class="carousel-item" style={`flex: 0 0 ${100 / itemsPerView}%; width: ${100 / itemsPerView}%;`}>
              <a href={item.href} class="block">
                <CarouselItem title={item.title} imageUrl={item.imageUrl} />
              </a>
            </div>
          );
        }
        if (item.type === 'video') {
          return (
            <div class="carousel-item" style={`flex: 0 0 ${100 / itemsPerView}%; width: ${100 / itemsPerView}%;`}>
              <div class="px-2 w-full h-full">
                <div class="bg-black w-full aspect-video rounded-lg overflow-hidden">
                  <iframe
                    class="w-full h-full"
                    src={item.embedUrl}
                    title="YouTube video player"
                    frameborder="0"
                    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                    allowfullscreen
                    loading="lazy"
                  ></iframe>
                </div>
              </div>
            </div>
          );
        }
        return null;
      })}
    </div>
  </div>

  <div class="flex justify-center items-center mt-6 gap-4">
    <button class="carousel-prev bg-custom-purple text-white p-4 rounded-full hover:bg-opacity-80 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-custom-purple focus:ring-opacity-50" aria-label="Previous items">
      <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M15 18l-6-6 6-6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
      </svg>
    </button>
    <button class="carousel-next bg-custom-purple text-white p-4 rounded-full hover:bg-opacity-80 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-custom-purple focus:ring-opacity-50" aria-label="Next items">
      <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M9 18l6-6-6-6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
      </svg>
    </button>
  </div>
</div>

<script define:vars={{ items, itemsPerView }}>
  function initCarousel() {
    const containers = document.querySelectorAll('.carousel-container');
    
    containers.forEach(container => {
      const track = container.querySelector('.carousel-track');
      const prevBtn = container.querySelector('.carousel-prev');
      const nextBtn = container.querySelector('.carousel-next');
      
      if (!track || !prevBtn || !nextBtn) return;
      
      // Skip if already initialized
      if (track.dataset.initialized === 'true') return;
      track.dataset.initialized = 'true';
      
      let currentIndex = 0;
      const totalItems = items.length;
      const itemWidth = 100 / itemsPerView;
      let isTransitioning = false;
      
      function updateCarousel(withTransition = true) {
        if (withTransition) {
          track.style.transition = 'transform 0.3s ease-in-out';
        } else {
          track.style.transition = 'none';
        }
        
        const translateX = -(currentIndex * itemWidth);
        track.style.transform = `translateX(${translateX}%)`;
      }
      
      function nextSlide() {
        if (isTransitioning) return;
        isTransitioning = true;
        
        currentIndex++;
        updateCarousel(true);
        
        // If we've moved past the original items, reset to beginning
        if (currentIndex >= totalItems) {
          setTimeout(() => {
            currentIndex = 0;
            updateCarousel(false);
            isTransitioning = false;
          }, 300);
        } else {
          setTimeout(() => {
            isTransitioning = false;
          }, 300);
        }
      }
      
      function prevSlide() {
        if (isTransitioning) return;
        isTransitioning = true;
        
        if (currentIndex <= 0) {
          // Jump to the end of the first set
          currentIndex = totalItems - 1;
          updateCarousel(false);
          setTimeout(() => {
            isTransitioning = false;
          }, 50);
        } else {
          currentIndex--;
          updateCarousel(true);
          setTimeout(() => {
            isTransitioning = false;
          }, 300);
        }
      }
      
      // Add event listeners
      nextBtn.addEventListener('click', nextSlide);
      prevBtn.addEventListener('click', prevSlide);
      
      // Set initial position
      updateCarousel(false);
    });
  }
  
  // Run on Astro page load
  document.addEventListener('astro:page-load', initCarousel);
  
  // Also run immediately if DOM is already ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initCarousel);
  } else {
    initCarousel();
  }
</script>

<style>
  .carousel-track {
    display: flex;
    align-items: stretch;
  }
  
  .carousel-item {
    flex-shrink: 0;
  }
</style> 